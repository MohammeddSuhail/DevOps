CPU Monitoring:

top or htop: Real-time system monitoring
Displays real-time system information including CPU, memory, swap, and running processes.
example: it keeps changing realtime
    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
    812 root      20   0  618312   4884   2188 S   0.7   0.1  12:31.40 tuned
  21033 someacct  20   0 4649744  73228   6144 S   0.7   2.0   4:10.03 unikixtran
  21181 someacct  20   0 4583120  72240  10428 S   0.7   1.9   5:55.18 unikixtran
    665 dbus      20   0   64856   2124   1424 S   0.3   0.1   0:18.95 dbus-daemon
  21005 someacct  20   0 5191096  87544  13376 S   0.3   2.3   3:52.75 unikixadmin
  21006 someacct  20   0 4650064  54092   8612 S   0.3   1.4   5:15.14 unikixtran
  21020 someacct  20   0 4649948  56072   7736 S   0.3   1.5   4:15.52 unikixtran



mpstat: 
CPU usage across all cores. Great for identifying multi-core CPU bottlenecks.
ex: mpstat 2 5
    where:
        2: Interval in seconds.
        5: Number of reports.
Gives.
%usr: CPU time spent on user processes.
%sys: CPU time on kernel processes.
%idle: Idle CPU time.

ex:
[root@appvm ~]# mpstat 2 5
Linux 4.18.0-553.27.1.el8_10.x86_64 (appvm)  01/16/2025      _x86_64_        (16 CPU)

09:59:40 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
09:59:42 AM  all   13.15    0.00   14.66    0.06    0.79    0.66    0.00    0.00    0.00   70.68
09:59:44 AM  all   19.95    0.00   19.26    0.00    0.85    0.66    0.00    0.00    0.00   59.28
09:59:46 AM  all   14.96    0.00   24.77    0.00    1.01    0.72    0.00    0.00    0.00   58.54
09:59:48 AM  all   26.23    0.00   27.66    0.00    0.95    0.86    0.00    0.00    0.00   44.30
09:59:50 AM  all   18.23    0.00   16.62    0.00    0.91    0.63    0.00    0.00    0.00   63.60
Average:     all   18.49    0.00   20.59    0.01    0.90    0.71    0.00    0.00    0.00   59.30





pidstat: Per-process CPU usage over time
Tracks CPU, memory, and I/O usage per process over a time interval
ex: pidstat 2 5
    where:
        2: Interval in seconds.
        5: Number of reports.
Gives,
%usr: User-level CPU usage per process.
%system: Kernel-level CPU usage per process.
%CPU: Total CPU usage per process.

ex:
[root@appvm ~]# pidstat 2 5
Linux 4.18.0-553.27.1.el8_10.x86_64 (appvm)  01/16/2025      _x86_64_        (16 CPU)

10:00:45 AM   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command
10:00:47 AM     0      3756    1.41    0.00    0.00    4.69    1.41     7  BESClient
10:00:47 AM 192606     81066   95.77    0.00    0.00    0.00   95.77     5  java
10:00:47 AM 194163    227633    0.47    0.00    0.00    0.00    0.47    12  unikixtran
10:00:47 AM 194163    227651    0.47    0.00    0.00    0.00    0.47     2  unikixtran
10:00:47 AM 194163    227680    0.47    0.00    0.00    0.00    0.47     4  unikixtran
10:00:47 AM 194163    227796    0.94    0.00    0.00    0.47    0.94    14  unikixtran
10:00:47 AM 194163    227876    0.47    0.00    0.00    0.00    0.47    11  unikixtran
10:00:47 AM 194163    227930    0.00    0.47    0.00    0.00    0.47     2  unikixtran
10:00:47 AM 194163    227943    0.47    0.00    0.00    0.00    0.47     2  unikixtran
10:00:47 AM 194163    228706    0.47    0.00    0.00    0.00    0.47    12  unikixtran
10:00:47 AM 194488    364633    0.00    0.47    0.00    0.00    0.47     2  unikixtran
10:00:47 AM 194488    364862    0.47    0.00    0.00    0.00    0.47     6  unikixtran
