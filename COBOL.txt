Divisions: https://www.tutorialspoint.com/cobol/cobol_program_structure.htm

There are 80 character positions on each line: https://www.tutorialspoint.com/cobol/cobol_basic_syntax.htm

Level Number: https://www.tutorialspoint.com/cobol/cobol_data_types.htm


Verbs:
ACCEPT
DISPLAY
MOVE
ADD
SUBTRACT
MULTIPLY
DIVIDE
COMPUTE


Conditional Statements: https://www.tutorialspoint.com/cobol/cobol_condition_statements.htm

Loop: https://tutorialspoint.com/cobol/cobol_loop_statements.htm

Arrays in COBOL are known as tables: https://www.tutorialspoint.com/cobol/cobol_table_processing.htm

File: https://www.tutorialspoint.com/cobol/cobol_file_handling.htm
File Organization: https://www.tutorialspoint.com/cobol/cobol_file_organization.htm
File Handling Verbs: https://www.tutorialspoint.com/cobol/cobol_file_handling_verbs.htm

Calling programs: https://www.tutorialspoint.com/cobol/cobol_subroutines.htm

Database Interface: https://www.tutorialspoint.com/cobol/cobol_database_interface.htm


copybook for any piece of code. Can be used tostore record structure or anything.
COPY 'STUDENT-COPYBOOK'.

generally for a file,
1. assign file path to a variable: ENVIRONMENT DIVISION. -> FILE-CONTROL.
2. explain it's record structore in DATA DIVISION. -> FILE SECTION.
3. then use




PROGRAM STRUCTURE TO WRITE TO THE FILE:

IDENTIFICATION DIVISION.
PROGRAM-ID. WRITEFILE.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT FILEN ASSIGN TO 'STUDENT.DAT'
           ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD  FILEN.
01  NAME  PIC A(25).

WORKING-STORAGE SECTION.
01  WS-NAME  PIC A(25).
01  WS-EOF   PIC A(1) VALUE 'N'.  *> Flag to control the loop

PROCEDURE DIVISION.
MAIN-PARA.
    OPEN OUTPUT FILEN         *> Step 1: Open file for writing

    PERFORM UNTIL WS-EOF = 'Y'
        DISPLAY 'Enter Name (Type END to finish):'
        ACCEPT WS-NAME         *> Step 2: Accept user input

        IF WS-NAME = 'END'     *> Step 3: Check for termination condition
            MOVE 'Y' TO WS-EOF
        ELSE
            MOVE WS-NAME TO NAME  *> Step 4: Move data to file record
            WRITE NAME            *> Step 5: Write the record to file
        END-IF
    END-PERFORM

    CLOSE FILEN              *> Step 6: Close the file

    DISPLAY 'File write completed.'
    STOP RUN.





Reading a Sequential File:

       IDENTIFICATION DIVISION.
       PROGRAM-ID. READ-STUDENT-FILE.

       DATA DIVISION.
       FILE SECTION.
       FD STUDENT-FILE.
       01 STUDENT-RECORD.
          05 STUDENT-ID        PIC 9(3).
          05 STUDENT-NAME      PIC X(20).
          05 STUDENT-MARKS     PIC 99.

       WORKING-STORAGE SECTION.
       01 WS-END-OF-FILE     PIC X VALUE 'N'.

       PROCEDURE DIVISION.
       
       OPEN INPUT STUDENT-FILE.
       
       PERFORM READ-RECORD UNTIL WS-END-OF-FILE = 'Y'.
       
       CLOSE STUDENT-FILE.
       
       STOP RUN.

       READ-RECORD.
           READ STUDENT-FILE INTO STUDENT-RECORD
              AT END
                 MOVE 'Y' TO WS-END-OF-FILE
              NOT AT END
                 DISPLAY 'Student ID: ' STUDENT-ID
                 DISPLAY 'Student Name: ' STUDENT-NAME
                 DISPLAY 'Marks: ' STUDENT-MARKS
           END-READ.









SQL table oprations:

1Ô∏è‚É£ Database Setup (Create the Table)
Before interacting with the database, you must create the required table.

sql
Copy code
CREATE TABLE STUDENT (
    STUDENT_ID      INT PRIMARY KEY,
    STUDENT_NAME    VARCHAR(25),
    STUDENT_ADDRESS VARCHAR(50)
);

üîé Explanation:
STUDENT_ID: Unique student identifier.
STUDENT_NAME: Student's name.
STUDENT_ADDRESS: Student's address.



2Ô∏è‚É£ COBOL Program Structure for Read/Write
üîµ Copybook (STUDENT.cpy)
Defines the structure to map COBOL variables to the database.

01 STUDENT-RECORD.
   05 STUDENT-ID      PIC 9(4).
   05 STUDENT-NAME    PIC X(25).
   05 STUDENT-ADDRESS PIC X(50).




üîµ COBOL Program

IDENTIFICATION DIVISION.
PROGRAM-ID. STUDENT-PROGRAM.

DATA DIVISION.
WORKING-STORAGE SECTION.

* SQL Communication Area
EXEC SQL INCLUDE SQLCA END-EXEC.

* Include Copybook for Student Record
EXEC SQL INCLUDE STUDENT END-EXEC.

* Host Variables for Data Operations
EXEC SQL BEGIN DECLARE SECTION END-EXEC.
   01 WS-STUDENT-ID      PIC 9(4).
   01 WS-STUDENT-NAME    PIC X(25).
   01 WS-STUDENT-ADDRESS PIC X(50).
EXEC SQL END DECLARE SECTION END-EXEC.

PROCEDURE DIVISION.

* Step 1: Connect to the Database
   EXEC SQL
      CONNECT TO 'YourDatabaseName' USER 'YourUsername' USING 'YourPassword'
   END-EXEC.
   
   IF SQLCODE NOT = 0
      DISPLAY 'Database Connection Failed' SQLCODE
      STOP RUN
   END-IF.

* Step 2: Insert Data into the Table
   MOVE 1001 TO WS-STUDENT-ID.
   MOVE 'Alice Johnson' TO WS-STUDENT-NAME.
   MOVE '123 Elm Street' TO WS-STUDENT-ADDRESS.

   EXEC SQL
      INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_ADDRESS)
      VALUES (:WS-STUDENT-ID, :WS-STUDENT-NAME, :WS-STUDENT-ADDRESS)
   END-EXEC.

   IF SQLCODE = 0
      DISPLAY 'Record Inserted Successfully'
   ELSE
      DISPLAY 'Error Inserting Record' SQLCODE
   END-IF.

* Step 3: Read Data from the Table
   MOVE 1001 TO WS-STUDENT-ID.

   EXEC SQL
      SELECT STUDENT_NAME, STUDENT_ADDRESS
      INTO :WS-STUDENT-NAME, :WS-STUDENT-ADDRESS
      FROM STUDENT
      WHERE STUDENT_ID = :WS-STUDENT-ID
   END-EXEC.

   IF SQLCODE = 0
      DISPLAY 'Student Name: ' WS-STUDENT-NAME
      DISPLAY 'Student Address: ' WS-STUDENT-ADDRESS
   ELSE
      DISPLAY 'Record Not Found or Error' SQLCODE
   END-IF.

* Step 4: Disconnect from the Database
   EXEC SQL
      DISCONNECT
   END-EXEC.

   DISPLAY 'Disconnected from Database'.
   STOP RUN.


Database Connection:
EXEC SQL
   CONNECT TO 'YourDatabaseName' USER 'YourUsername' USING 'YourPassword'
END-EXEC.
Connects to the database.
SQLCODE checks if the connection was successful.

Insert Data:
EXEC SQL
   INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_ADDRESS)
   VALUES (:WS-STUDENT-ID, :WS-STUDENT-NAME, :WS-STUDENT-ADDRESS)
END-EXEC.
Inserts a student record into the STUDENT table.

Read Data:
EXEC SQL
   SELECT STUDENT_NAME, STUDENT_ADDRESS
   INTO :WS-STUDENT-NAME, :WS-STUDENT-ADDRESS
   FROM STUDENT
   WHERE STUDENT_ID = :WS-STUDENT-ID
END-EXEC.
Reads a student's name and address using the STUDENT_ID.

Disconnect:
EXEC SQL
   DISCONNECT
END-EXEC.
Safely disconnects from the database.



