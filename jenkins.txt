link:
https://stackoverflow.com/questions/21557998/jenkins-failed-to-connect-to-repository

Step a:
In the jenkins job, fill up the following info under Source Code Management
Repository URL: 
ssh link of git repo.
ex: git@github.com:MohammeddSuhail/Ansible.git

Credentials: -none-

Step b:
Now create ssh private and public keys using ssh-keygen -t rsa -C "key label" via git bash shell. 
The ssh private and public keys go under .ssh directory of your logged in user directory. 
Just copy the .ssh folder and paste it under C:\Windows\System32\config\systemprofile

Step c:
Add your public key to your GIT server account. 
Run the jenkins job and now you should be able to connect to the GIT account via ssh from jenkins.






1.
manage artifacts:
u can keep track of file directly by adding Post-build Actions: archieve the artifact
You need not check workspace again and again





2.
Using parameters in project for generalizing the job,
select "This project is parameterized" and add parameter.

Build Steps: Execute Windows batch command,
echo off 
echo name = %name%

Now when you build it, it will ask the parameter value.

There are many type of parameter. Like in choice parameter u can give a list of choice to select  





3.
Scheduling Jobs:
Running jobs automatically.
jobs ex: updating software, monitoring system details, etc


minute: 0-59
hour: 0-23
day of month: 1-31
month: 1-12 or Jan-Dec
day of week: 0-6

syntax: minute hour day_of_month month day_of_week

* for all(full range)

ex: * * * * *
means run every minute of all day

for more info, can use ? near every option in jenkins

alias's:
@hourly 
@daily 
@midnight 
@weekly 
@monthly
@annually

Under Build Triggers,
several options are there, one of them is Build periodically.





4.
Create a view:
basically showing different set of vies for different View_name
there is a option of selecting jobs either manually or using regular expression.
At start we only one view that is "All" view.
When u delete a view, jobs won't be deleted.





5.
Create a folder:
for grouping a jobs.
when u delete a folder, jobs will be deleted.









Pipeline:
https://www.jenkins.io/doc/book/pipeline/

You can either write the script in jenkins or you can pull the jenkins script from your git repo using "Pipeline script from SCM"

Pipeline types:

1. Scripted Pipeline: 
starts with node {} 
Groovy-based DSL
Doen't have facility of starting the build from a spefic stage like in declarative pipeline.

syntax:
node {
  stages { 
    stage('Build') { 
      steps {}
    } 
    stage('Test') { 
      steps {}
    }
    stage('Deploy') { 
      steps {}
    }
  } 
}


2. Declarative Pipeline 
starts with pipeline {} 
Specifically designed for configuring Jenkins projects as code
link:
https://www.jenkins.io/doc/book/pipeline/syntax/

syntax of declarative pipeline:

pipeline {
  agent any
  stages { 
    stage('Build') { 
      steps {
        .....
      }
    } 
    stage('Test') { 
      steps {
        .....
      }
    }
    stage('Deploy') { 
      steps {
        .....
      }
    }
  } 
}



agent section:
Specifies where pipeline steps will be run 
• any 
• label 
• docker 
• none


Run on the first available system
agent any       

Run on a system with this label
agent { label 'linux' }       

Run the pipeline inside a docker container using the specified image.
agent { 
  docker { 
    image 'maven'
  }    
}

Defer agent selection to stages
agent none 



ex:

pipeline { 
    agent any 
    
    stages { 
        stage('Initialize') { 
            steps { 
                echo 'Initializing..'
            } 
        } 
        stage ('Build') { 
            steps { 
                echo 'Building..'
            }  
        } 
        stage('Test') { 
            steps {  
                 echo 'Testing..'
            } 
        } 
        stage ('Deploy') { 
            steps { 
                echo 'Deploying....'
            }
        }
    }
}



ex:
pipeline {
  agent any
  
  stages { 
      
    stage('git thing') { 
        steps { 
            git branch: 'main', url: 'git@github.com:MohammeddSuhail/Testing_Git.git'
        }  
    } 
    
  } 
}



Basic Steps:
link: https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/
ex:
echo                   Print message. 
git                    Check out code from a Git repo.
sh                     Run a shell script or local command. 
archiveArtifacts       Archive artifacts.


Finding steps:
https://www.jenkins.io/doc/pipeline/steps/





You can use Snippet generator:
this option is right below the box where we write the script






Variables:

1.
Enivornment varibles:
They must be in capital letters

a. Globally scoped variables: 
pipeline { 
  agent any 
  environment { 
    MAX_SIZE = 10 
    MIN_SIZE = 1
  }  
  ...
} 

b.Locally scoped variables: 
pipeline { 
  ...
  stages { 
    stage ('Scale by 10x') {  
      environment { 
        MAX_SIZE = 100 
        MIN_SIZE = 10 
      } 
      ...
    }
  } 
} 


Using:

echo env.MAX_SIZE 
or
echo MAX_SIZE

If used inside a string,
echo "$env.MAX_SIZE" 
or
echo "$MAX_SIZE"
or
echo "${env.MAX_SIZE}" 
or
echo "${MAX_SIZE}"




2.
currentBuildVariables:
Values refer to the currently running build.
There is only one currentBuildVariables named currentBuild in which there can be many varibles
ex:
currentBuild.startTimeInMillis
currentBuild.duration
currentBuild.currentResult





3.
Parameter Variables: all caps
Assign values to a variable when a job is triggered.
Are not available immediatly(not avaible at exection of job for first time, since it takes values from user after exec)

pipeline { 
  agent any 
  parameters { 
    ...
  }  
  ...
} 

using:

anywhere other than inside shell,
echo params.PARAMETER_NAME
or
echo "${params.PARAMETER_NAME}"

inside shell:
${PARAMETER_NAME}

So when these parameters are used in the unix commands, they are just simply called on because Jenkins has set them as unix environment variables.
However, if you are using a when condition, the parameters must be accessed in a way the groovy syntax will understand. 


Parameter Types:
String
Text
Boolean
Choice
Password

ex:
pipeline{
  agent any
  parameters {
    string(name: 'FATHER',
           defaultValue: 'Vader',
           description: 'Enter Your father's name')
 
    text (name: 'PHRASE',
          description: 'Enter your favoiNte phrase from a Charles Dickens Book',
          defaultValue: 'It was the bes of times, it was the worst of times, \nit was the age')

    booleanParam(name: 'RUN_TESTS',
            defaultValue: false,
            description: 'Toggle this value to run tests.')

    choice (name: 'AWS_REGION',
        choices: ['us-east-1', 'us-east-2', 'us-nest-1', 'us-west-2'],
        description: 'Select the AWS region for deployment.')
        
    password(name: 'DATABASE_PASSWORD',
        defaultValue: 'DATABASE PASSWORD',
        description: 'Enter the database password')
  }

  stages{
     ...
  }

}





Extended Choice paramter: https://stackoverflow.com/questions/42392247/how-can-i-use-the-extended-choice-parameter-plugin-in-a-jenkins-pipeline-script
allows selection of multiple choices like multiselect, radio buttons, check boxes, test box, hidden

a. Can also get the options from a properties file(file with .properties extension):
Testcases=none,Test1,Test2,Test3,Test4

b. Can also get the options from a groovy script(with .groovy extension):
   return['none', 'Test1', 'Test2', 'Test3', 'Test4']

ex:
properties([
    parameters([
        extendedChoice( 
            name: 'PROJECT', 
            defaultValue: '', 
            description: 'Sélectionnez le projet à construire.', 
            type: 'PT_SINGLE_SELECT', 
            groovyScript: valueKeysScript,
            descriptionGroovyScript: valueNamesScript
        )
    ])
])

works:
radio button,
extendedChoice(name: 'DeployTo', description: 'Select the environment to deploy to', type: 'PT_RADIO', value: 'Dev,Test,Stage', visibleItemCount: 5)

add this indside parameters





https://stackoverflow.com/questions/43410204/active-choices-reactive-reference-parameter-in-jenkins-pipeline
1. Active choices parameters:
   Can generates a list of values for the build parameter dynamically

2. Active Choices Reactive Parameter:
  Can generates a list of values for the build parameter dynamically depending upon other 'Active Choices Parameter'

3. Active Choices Reactive Reference Parameter
   Can be used to showing important message to user for correct selection of Active Choices Reactive Parameter.











when: Conditional execution

pipeline {
  agent any
  stages {
    stage ('XYZ') {
      when {}
    }
  }
}

Conditions for when:

• branch
when { branch 'default' }

• environment
when {
environment name: 'DEPLOY_TO', value: 'production' }

• expression
when {
  expression {
    params. ENVIRONMENT == 'PRODUCTION'
  }
}
worked:
when {
  expression {return params. ENVIRONMENT == 'PRODUCTION'}
}

we can use Groovy expressions inside expression {} 
Groovy operators:
•https://groovy-lang.org/operators.html


ex:
pipeline{
  agent any
  parameters {
    choice(name: 'ENVIRONMENT',
          choices: ['DEVELOPMENT', 'STAGING', 'PRODUCTION'],
          description: 'Choose the environment for this deployment')
  }

  stages {

    stage ('Build') {
      steps{
        echo "Building.."
      }
    }

    stage ('Deploy to non-production environments') {
      when{
        // Only deploy if the environment is NOT production
        expression { params.ENVIRONMENT != 'PRODUCTION' }
      }      
      steps{
        echo "Deploying to ${params.ENVIRONMENT)"
      }
    }

    stage ('Deploy to production environment') {
      when{
        expression { params.ENVIRONMENT == 'PRODUCTION' }
      }
      steps {
        input message: 'Confirm deployment to production...', ok: 'Deploy'
        echo "Deploying to ${params.ENVIRONMENT}"
      }
    }

  }
}


input message: 'Confirm deployment to production...', ok: 'Deploy'
here this stage will only proceed once user responds


















task ex:
To take 3 inputs(check below ex) and deploy & print the log only if ENVIRONMENT parameter is 'PRODUCTION'

=>

pipeline{
  agent any
  parameters {
    choice(name: 'ENVIRONMENT',
          choices: ['DEVELOPMENT', 'STAGING', 'PRODUCTION'],
          description: 'Choose the environment for this deployment')
    
    password(name: 'APIKEY',
        defaultValue: 'AB123',
        description: 'Enter the database API Key')
        
    text (name: 'LOG',
          description: 'Enter THE LOG',
          defaultValue: '')      
  }

  stages {

    stage ('Test') {
      steps{
        echo "Tested"
      }
    }

    stage ('Deploy') {
      when{
        // Only deploy if the environment is NOT production
        expression { params.ENVIRONMENT == 'PRODUCTION' }
      }      
      steps{
        echo "Deploying to ${params.ENVIRONMENT}"
      }
    }

    stage ('Report') {
      when{
        expression { params.ENVIRONMENT == 'PRODUCTION' }
      }
      steps {
        echo "${params.ENVIRONMENT}: "
        echo "$params.LOG"
      }
    }

  }
}








 stage ('Report(with artifact)') {
      when{
        expression { params.ENVIRONMENT == 'PRODUCTION' }
      }
      steps {
        echo "This stage generates a report"
        sh "printf  \"${params.LOG}\" › ${params.ENVIRONMENT}.txt"
        archiveArtifacts allowEmptyArchive: true,
              artifacts: '*.txt',
              fingerprint: true,
              followSymlinks: false,
              onlyIfSuccessful: true
      }
    }

















using maven in jenkins:
specify the maven project github repo
while creating,
Build Steps -> Invoke top-level Maven targets:
select maven version
Plugin Goals: clean, resources, jar, compile, test, install, deploy, site


















Multibranch Pipeline project:
The Multibranch Pipeline project type enables you to implement different Jenkinsfiles for different branches of the same project. In a Multibranch Pipeline project, Jenkins automatically discovers, manages and executes Pipelines for branches which contain a Jenkinsfile in source control.

Basically it create diferent builds for each branch of github repo.





Blue Ocean: Gives better UI
access: http://localhost:8080/blue
















script:
example of using if else (conditional statements) inside script tag
all scripts like sh command also also goes inside it

pipeline {
  agent any

  parameters{
    choice (name: 'Region',
            choices:  ['JENKIVP','JENKREL'],
            description: 'Select the Region')
  }
  
  stages {
    stage('Build') {
      steps {
        script{
          if (params.Region == 'JENKIVP') {
            echo "ivp: ${params.Region}"
          }else{
            echo "rel: ${params.Region}"
          }
        }
      }
    }
  }
}











Active Choices(ChoiceParameter) and Active Choices Reactive Parameter(CascadeChoiceParameter):

properties([
  parameters([
    [
            $class: 'ChoiceParameter', 
            choiceType: 'PT_RADIO', 
            description: 'Select a choice', 
            filterLength: 1, 
            filterable: false, 
            name: 'choice1', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'return ["ERROR"]'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 'return[\'aaa:selected\',\'bbb\']'
                ]
            ]
        ],,
    [
      $class: 'CascadeChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      name: 'choice2',
      referencedParameters: 'choice1',
      script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'return ["error"]'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 'if(choice1.equals("aaa")){return ["alpha","omega"]} else {return ["Start","End"]}'
                ]
            ]
   ]
 ])
])

pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        echo "choice1: $choice1"
        echo "choice2: $choice2"
      }
    }
  }
}


CascadeChoiceParameter can be single select, multi select, radio buttons and checkboxes.




















Active Choices(ChoiceParameter) and Active Choice Reactive Reference(DynamicReferenceParameter):

properties([
    parameters([
        
        extendedChoice(name: 'Region_Action', description: 'Select actions for the region. Note: Choose "Delete a Region" option only if Region already exists.', type: 'PT_CHECKBOX', value: 'Delete a Region, Create a Region'),
        booleanParam (defaultValue: false, name: 'Smoke_Test', description: 'Do you want to perform Smoke Test?'),
        string (name: 'region_name', description: 'Enter the region name.'),
        [
            $class: 'ChoiceParameter', 
            choiceType: 'PT_RADIO', 
            description: 'Select the port configuration method.', 
            filterLength: 1, 
            filterable: false, 
            name: 'Port_Selection', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'return ["ERROR"]'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 'return[\'Manual Entry:selected\',\'Auto-Detect Ports\']'
                ]
            ]
        ], 
        [$class: 'DynamicReferenceParameter',
            name: 'Ports',
            referencedParameters: 'Port_Selection',
            choiceType: 'ET_FORMATTED_HTML',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["Error"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        if (Port_Selection == 'Manual Entry') {
                            return '''
                                <p><b>p1:</b><br>Enter p1.<br><input type="text" class="setting-input" name="value" value=""></p>
                                <p><b>p2:</b><br>Enter p2.<br><input type="text" class="setting-input" name="value" value=""></p>
                                <p><b>p3:</b><br>Enter p3.<br><input type="text" class="setting-input" name="value" value=""></p>
                            '''
                        }else{
                            return "Not Required";
                        }
                        """
                ]
            ]
        ]
                               
    ])
])

pipeline {
    stages {

        stage("stage1"){
            steps{
                script {
                    env.valid = "true";

                    //using the DynamicReferenceParameter
                    List portNums = params.Ports.tokenize(',');
                    if(params.Port_Selection == 'Manual Entry' && portNums.size()<3){
                        env.valid = "false";
                    }else{
                        env.p1 = portNums[0];
                        env.p2 = portNums[1];
                        env.p3 = portNums[2];
                    }

                    //using them inside shell script: "$config_file" "${Database_Type}" "${p1}" "${p2}" "${p3}"
                }
            }
        }

    }

}


ET_FORMATTED_HTML, ET_FORMATTED_HTML








"Poll SCM" polls the SCM periodically for checking if any changes/ new commits were made and shall build the project if any new commits were pushed since the last build.



upstream build and downstream build


