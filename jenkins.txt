link:
https://stackoverflow.com/questions/21557998/jenkins-failed-to-connect-to-repository

Step a:
In the jenkins job, fill up the following info under Source Code Management
Repository URL: 
ssh link of git repo.
ex: git@github.com:MohammeddSuhail/Ansible.git

Credentials: -none-

Step b:
Now create ssh private and public keys using ssh-keygen -t rsa -C "key label" via git bash shell. 
The ssh private and public keys go under .ssh directory of your logged in user directory. 
Just copy the .ssh folder and paste it under C:\Windows\System32\config\systemprofile

Step c:
Add your public key to your GIT server account. 
Run the jenkins job and now you should be able to connect to the GIT account via ssh from jenkins.






1.
manage artifacts:
u can keep track of file directly by adding Post-build Actions: archieve the artifact
You need not check workspace again and again





2.
Using parameters in project for generalizing the job,
select "This project is parameterized" and add parameter.

Build Steps: Execute Windows batch command,
echo off 
echo name = %name%

Now when you build it, it will ask the parameter value.

There are many type of parameter. Like in choice parameter u can give a list of choice to select  





3.
Scheduling Jobs:
Running jobs automatically.
jobs ex: updating software, monitoring system details, etc


minute: 0-59
hour: 0-23
day of month: 1-31
month: 1-12 or Jan-Dec
day of week: 0-6

syntax: minute hour day_of_month month day_of_week

* for all(full range)

ex: * * * * *
means run every minute of all day

for more info, can use ? near every option in jenkins

alias's:
@hourly 
@daily 
@midnight 
@weekly 
@monthly
@annually

Under Build Triggers,
several options are there, one of them is Build periodically.





4.
Create a view:
basically showing different set of vies for different View_name
there is a option of selecting jobs either manually or using regular expression.
At start we only one view that is "All" view.
When u delete a view, jobs won't be deleted.





5.
Create a folder:
for grouping a jobs.
when u delete a folder, jobs will be deleted.









Pipeline:

Pipeline types:

1. Scripted Pipeline: 
starts with node {} 
Groovy-based DSL


2. Declarative Pipeline 
starts with pipeline {} 
Specifically designed for configuring Jenkins projects as code






syntax of declarative pipeline:

pipeline {
  agent any
  stages { 
    stage('Build') { } 
    stage('Test') { } 
    stage('Deploy') { }
  } 
}



agent section:
Specifies where pipeline steps will be run 
• any 
• label 
• docker 
• none


Run on the first available system
agent any       

Run on a system with this label
agent { label 'linux' }       

Run the pipeline inside a docker container using the specified image.
agent { 
  docker { 
    image 'maven'
  }    
}

Defer agent selection to stages
agent none 



ex:

pipeline { 
    agent any 
    
    stages { 
        stage('Initialize') { 
            steps { 
                echo 'Initializing..'
            } 
        } 
        stage ('Build') { 
            steps { 
                echo 'Building..'
            }  
        } 
        stage('Test') { 
            steps {  
                 echo 'Testing..'
            } 
        } 
        stage ('Deploy') { 
            steps { 
                echo 'Deploying....'
            }
        }
    }
}



something lol,

pipeline { 
    agent any 
    options { 
        buildDiscarder(logRotator(daysToKeepStr : '10', numToKeepStr : '10')) 
        timeout(time : 12, unit : 'HOURS') 
        timestamps () 
    } 
    triggers { 
        cron '@midnight' 
    } 
    stages { 
        stage('Initialize') { 
            steps { 
                echo 'Initializing..'
            } 
        } 
        stage ('Build') { 
            steps { 
                echo 'Building..'
            }  
        } 
        stage('Test') { 
            steps {  
                 echo 'Testing..'
            } 
        } 
        stage ('Deploy') { 
            steps { 
                echo 'Deploying....'
            }
        }
    }
}


Basic Steps:
link: https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/
ex:
echo                   Print message. 
git                    Check out code from a Git repo.
sh                     Run a shell script or local command. 
archiveArtifacts       Archive artifacts.


Finding steps:
https://www.jenkins.io/doc/pipeline/steps/





You can use Snippet generator:
this option is right below the box where we write the script





