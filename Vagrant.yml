1. Create a Vagrant Project:
mkdir rocky-vm
cd rocky-vm
vagrant init generic/rocky8


2. Vagrantfile for Rocky Linux:
Other providers: Virtualbox, VMWare, AWS Cloud, Google Cloud, Azure, OpenStack
Here we prefferd Virtualbox.

Vagrant.configure("2") do |config|
  config.vm.box = "generic/rocky8"

  # VM Configuration
  config.vm.hostname = "rocky-vm"
  config.vm.network "private_network", type: "dhcp"
  
  config.vm.provider "virtualbox" do |vb|
    vb.name = "RockyLinux_VM"
    vb.memory = "2048"
    vb.cpus = 2
  end

  # Provisioning with basic packages
  config.vm.provision "shell", inline: <<-SHELL
    sudo dnf update -y
    sudo dnf install -y epel-release
    sudo dnf install -y vim git wget net-tools
  SHELL
end


3. Start the VM:
vagrant up

This will:
Download the Rocky Linux 8 box (generic/rocky8)
Set up the VM with 2GB RAM and 2 CPUs
Install basic packages


5. Access the VM:
vagrant ssh


6. Stopping and Managing the VM:
Suspend: vagrant suspend (pauses the VM)
Halt: vagrant halt (shuts down the VM)
Destroy: vagrant destroy (deletes the VM)








Vagrant is a tool used to configure VM's. It will create VM's using a Vagrantfile.

Add all details for VMs in a single file called Vagrantfile
All configurations and software details can be added with a single command (vagrant up) all VMs will be created on top of the physical machines.



open-source tool written in Ruby
helps us to automate the creation and management of Virtual Machines
we can specify the configuration of a virtual machine in a simple configuration file
And then create the VM with using simple vagrant command vagrant up
Can control VMs from command line using Vagrant commands



1. vagrant init


2. Vagrantfile will have the below details:

Which provider to use:
ex:Virtualbox, VMWare, AWS Cloud, Google Cloud, Azure, OpenStack

What base image to use.

Which provisioner to use
ex: Ansible, Puppet, Chef, Salt or any other scripts.


3. vagrant up
By this command all the VM's will be crerated and configured.


















Vagrant - Getting Started | Install > Setup > Use

Step 1 - Install Vagrant https://www.vagrantup.com/downloads Check vagrant is installed vagrant --version

Step 2 - Select a VM Provider. Vagrant has direct support for VirtualBox, Hyper-V, Docker
Install VirtualBox https://www.virtualbox.org/wiki/Downloads

Step 3 - Create a new folder for Vagrant project

Step 4 - On terminal or command line navigate to the folder and initiate vagrant project with "vagrant init" command
This will create a new Vagrantfile in the folder. Vagrantfile is a configuration file that defines the settings for your virtual machine

Step 5 - Choose a box to use https://app.vagrantup.com/boxes/search
A box is a pre-configured virtual machine image that you can use as a starting point for your virtual machine

Step 6 - Add configuration of the box in vagrantfile
For example, you could use the "ubuntu/bionic64" box by adding the following line to your Vagrantfile:
config.vm.box = "ubuntu/bionic64"
We can also directly add configuration for the virtual machine using the following commands
vagrant init centos/7 (this will create a new vagrantfile and add the centos/7 config in it, use this only if vagrantfile does not already exists)
vagrant box add centos/7 (will add box to vagrant, but will not create Vagrant file)

Step 7 - Start virtual machine using command "vagrant up"
This will create a new virtual machine using the box you selected and start it.

Sten 8 - SSH into the virtual machine using command "vagrant ssh"
Now you can run the vagrant commands here.











vagrant box add:
Adds a box to your local box repository
It won't add the box info in Vagrantfile, we'll have manually add it. Then we can call vagrant up, it will start the vm.

Location where vm box will be there,
Mac OS X and Linux: ~/ vagrant.d/boxes
Windows: C:/Users/USERNAME/.vagrant.d/boxes

ex: vagrant box add ubuntu/focal64



vagrant box list:
Lists all boxes in your local box repository
ex: vagrant box list

vagrant box outdated:
Checks if any boxes in your local box repository are outdated
ex: vagrant box outdated

vagrant box update:
Updates a box to a new version
ex: vagrant box update ubuntu/focal64

vagrant box repackage:
Repackages a box with a new name and metadata
ex: vagrant box repackage ubuntu/focal64 --name my-new-box

vagrant box prune:
Removes outdated boxes from your local box repository
ex: vagrant box prune

vagrant box remove:
Removes a box from your local box repository
ex: vagrant box remove ubuntu/focal64
















Command
Vagrant init
Initializes a new Vagrant environment by creating a Vagrantfile

vagrant up
Creates and configures the guest machine

vagrant ssh
Logs in to the guest machine via SSH

vagrant ssh-config
Outputs OpenSSH valid configuration to connect to the VMs via SSH

vagrant halt
Stops the guest machine

vagrant suspend
Suspends the guest machine

vagrant resume
Resumes a suspended guest machine

vagrant reload
Reloads the guest machine by restarting it

vagrant destroy
Stops and deletes all traces of the guest machine

vagrant status
Shows the status of the current Vagrant environment

vagrant package
Packages a running virtual environment into a reusable box

vagrant provision
Runs any configured provisioners against the running VM.

vagrant plugin install
Installs a Vagrant plugin

vagrant plugin list
Lists all installed Vagrant plugins

vagrant plugin uninstall
Uninstalls a Vagrant plugin



Examples
vagrant init centos/7
vagrant up
vagrant ssh
vagrant ssh-config
vagrant halt
vagrant suspend
vagrant resume
vagrant reload
vagrant destroy
vagrant status
vagrant package -output mybox.box
vagrant provision
vagrant plugin install myplugin
vagrant plugin list
vagrant plugin uninstall myplugin



