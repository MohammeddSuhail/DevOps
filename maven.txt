
create project: This create all the folder structure and pom.xml also
mvn archetype:generate -DgroupId=com.mycompany.package_name -DartifactId=project_name -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false


or

1.
mkdir my-app
cd my-app



2.
mkdir -p src/main/java/com/mycompany/app
mkdir -p src/test/java/com/mycompany/app


Replace com/mycompany/app with your desired package structure.



3. Create a pom.xml file: In your project directory, create a new file named pom.xml with the following content:

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.mycompany.package_name</groupId>
    <artifactId>Project_name</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>com.microsoft.ews-java-api</groupId>
            <artifactId>ews-java-api</artifactId>
            <version>2.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <!-- Replace with your main class -->
                            <mainClass>com.mycompany.package_name.main_class_name</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>


Here <build> <plugins>, we ask for all the dependencies to be included the jar which will created itself.
Replace com.mycompany.app and my-app with your desired group ID and artifact ID.



4.
Create a new Java class and copy the provided code into it: In the src/main/java/com/mycompany/app directory.


Option A:
5.Build and run your project: You can now build your project with the following command:
mvn package



6. And then run your project with the following command:
java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.class



Option B:
mvn clean compile assembly:single

java -jar target/YourApp.jar






Listing all the files in the jar:
jar tf target/jar_file_name.jar








If u wanna specify the main class name:
src/main/resources/META-INF/MANIFEST.MF 
=> Main-Class: com.mycompany.app.App

mvn compile

mvn package

Rebuild Your JAR:
jar cmf src/main/resources/META-INF/MANIFEST.MF target/YourApp.jar -C target/classes .

Execute your JAR using:
java -jar target/YourApp.jar





mvn compile

mvn test

mvn package




just,
mvn clean compile assembly:single





























Maven is a popular build automation tool for Java-based projects that helps manage and organize
the software development process.
It provides a standard way to define project dependencies, build processes, and project structure,
making it easier for developers to manage and maintain complex Java applications.
Maven uses a declarative approach to configuration and relies on XML files called "pom.xml" to
describe the project's structure, dependencies, and build process
It also offers a vast repository of open-source libraries and plugins that can be easily integrated into
projects.

When you say build, it means it takes all the code & dependencies and creates executable(like jar files).


Features of maven:
Dependency Management
Project Standardization
Build Automation
Plugin System
Consistent Builds
Integration with IDEs







using maven in jenkins:
specify the maven project github repo
while creating,
Build Steps -> Invoke top-level Maven targets:
select maven version
Plugin Goals: clean, resources, jar, compile, test, install, deploy, site






Use Intellij or Eclipse 
Adding dependencies in pom.xml

Lifecycle of maven:
There are three built-in build lifecycles.
default: handles project build and deployment
clean: handles project cleaning
site: handles the creation of project site documentation

Maven Build Phases
Maven build lifecycle goes through a set of stages, they are called build phases. For example, the default lifecycle is made up of the following phases.
validate
compile
test
package
verify
install
deploy
The build phases are executed sequentially. When we run a maven build command, we specify the phase to be executed. 
Any maven build phases that come before the specified phase is also executed. 
For example, if we run mvn package then it will execute validate, compile, test, and package phases of the project.

Plugin Goals: is basically a java method to perform something 
clean
resources
jar
compile
test
install
deploy
site
These comes under plugin
Check right end(named maven) you'll get all the stages of lifecycle



****
phases uses plugin goals
***


Plugins(2 types:build & reporting)
Check right end(named plugin) you'll find all the list of core plugins
->Used clean: it removed the target folder generated by last build(install)
->U need to add plugins inside the pom.xml(under build section)




Modules:
A project will be divided into several modules
Right click project -> new -> Module
While creating, u need to add the parent of the module
This module info will also be added in pom.xml file
(Need to specify the parent in module's pom.xml and need to specify the module info in main pom.xml)

For using methods/functions present in one module in another module,
U need to the dependency of the module that u want to use inside the pom.xml file of the module in which u r using it


For web app, during creation of project select "Maven ArchType"





pom.xml structure:
<project>  
  ...
  <dependencies>  
    ...
  </dependencies>  
  ...
  <build>
    <plugin>
    ...
    </plugin>
  </build>
</project>  

ex:
<project xmlns="http://maven.apache.org/POM/4.0.0"   
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0   
http://maven.apache.org/xsd/maven-4.0.0.xsd">  
  
  <modelVersion>4.0.0</modelVersion>  
  
  <groupId>com.javatpoint.application1</groupId>  
  <artifactId>my-application1</artifactId>  
  <version>1.0</version>  
  <packaging>jar</packaging>  
  
  <name>Maven Quick Start Archetype</name>  
  <url>http://maven.apache.org</url>  
  
  <dependencies>  
    <dependency>  
      <groupId>junit</groupId>  
      <artifactId>junit</artifactId>  
      <version>4.8.2</version>  
      <scope>test</scope>  
    </dependency>  
  </dependencies>  
  
</project>  








