To get hash id:
git log --oneline


Going back to a perticalar commit:
git reset --hard hash_id             //this will change locally
git push origin branch_name --force  //this will change remotely
//here origin is your link name


Getting branch info: 
git branch        //Lists local branches.
git branch -r     // Lists all the remote branches.
git branch -r -v  // Lists all the remote branches with the latest commit hash and commit message.


Deleting a branch:
git branch -d localBranchName                // delete branch locally
git push origin --delete remoteBranchName    // delete branch remotely



Not tried:
Just to go back and check the code:
git checkout hash_id .


rm -rf filename.txt
deletes the file


Usually main branch name will be main



To get config info: 
git config -l

git config --global user.name "FirstName LastName"
git config --global user.email mail_id

to check:
git config user.name    or   git config --list | grep user.name
git config user.email



1.
git init
in the project folder


once you make some change, like creating a file


2.
git status
says which files are:
untracked(not put to history)
modified etc



3.
git add .                   for all files

git add name.txt            for a specific file

This command will sort of put the files in stage(that means now the files can be put to the memory)


If u put a file to stage by mistake and want remove it from stage then,
git restore --staged names.txt



4.
git commit -m "some meassage you want"
Before committing it must be staged(step 3)




5.
git log
to see history





6.
Reset
if u wanna undo the operation, that is noting but going back to previous state in history.
just copy the hash id of the commit to which state wanna go(using git log, u can see the hash id's of commit)
then
git reset --hard copied_hash_id
Now all the commits afetr this id will be removed from history(log)
This will change locally
To change remotely:
git push origin branch_name --force

If u wanna go back to previous commits,
git reset HEAD~no_of_commits_u_wanna_go_back
ex:git reset HEAD~1
Now all those files will be unstaged(who were committed before), use git restore . to remove all those changes

git reset --hard HEAD~no_of_commits_u_wanna_go_back
ex:git reset --hard HEAD~1
it won't just put them in un-staged area, instead it removes those changes

If you wanna unstage all files,
git reset .     





7.
Restore

git restore filename
will remove all unstaged changes in the specified file.

git restore .
will remove all unstaged changes in all the files in project.

If u put a file to stage by mistake and want remove it from stage then,
git restore --staged names.txt



8.
If u have made changes and staged files after last commit and u wanna go back to last commit,
git reset .      => will unstage files
git restore .    => will remove any changes that's not staged 





8.
To get back to that commit removed from history use reflog to look up it's ref.

git reflog
Scan the first few entries, and find the commit that was lost. 

If you have not made any extra work since you did the reset --hard you can do:
git reset --hard ID

If you have made other work since the reset, you could cherry-pick if back onto your branch like this:
git cherry-pick ID





9.
If u r working on something and it's not complete, so don't wanna commit it,but u wanna store it somewhere
It's like saying, don't want u in history, just stay in backstage, and I'll call u when need

git add .
git stash

then if u wanna bring it back, bring them from backstage area to un-stage
git stash pop

if u don't want the things in stash, deleting people from backstage
git stash clear















GitHub:


To display only the name of the current branch you're on:
git rev-parse --abbrev-ref HEAD

or 
git branch




clonig:
git clone link_to_repo
ex:
git clone https://github.com/MohammeddSuhail/Testing_Git.git





Setting your name and email: 
git config --global user.name "FIRST_NAME LAST_NAME"
git config --global user.email "MY_NAME@example.com"




1.
git remote add origin url
for connecting the repository to the remote project in your system

url -> your new repository url

origin -> can be any name given to the url
	    by default it will origin so




git remote -v
will show all the links connected to the project








2.
For authticating yourself with github

link:
https://stackoverflow.com/questions/21557998/jenkins-failed-to-connect-to-repository

Step a:
In the jenkins job, fill up the following info under Source Code Management
Repository URL: 
ssh link of git repo.
ex: git@github.com:MohammeddSuhail/Ansible.git

Credentials: -none-

Step b:
Now create ssh private and public keys using ssh-keygen -t rsa -C "key label" via git bash shell. 
The ssh private and public keys go under .ssh directory of your logged in user directory. 
Just copy the .ssh folder and paste it under C:\Windows\System32\config\systemprofile

Step c:
Add your public key to your GIT server account. 
Run the jenkins job and now you should be able to connect to the GIT account via ssh from jenkins.




3.
git push

git push whiich_url which_branch
ex:
git push origin main

origin -> name given to the url
master -> branch name

pushing the changes to GitHub repository

create a branch for each feature, because each branch can have only one pull request



If u have pushed something, but u wanna go back to some other version of code and then push,
first go back to the prev version by git restore command then,
git push origin branch_name - f





4.
git pull
will bring all the files in repo to local working directory.




5.
git fetch
will bring all the files to system, but won't add to working directory.
In order to add those files to working directory,
git merge





6.
For creating a new branch

git branch feature             => will create new branch called feature
git checkout feature           => for making the pointer point to feature

now any new commit will be saved/added in new branch(i.e, in this case "feature")

main branch will have the code which will used stable and active
we create new branches, while working on new features or while fixing a bug


You have to set upstream url for each brach:
git push --set-upstream upstream_url_name branch_name
ex:
git push --set-upstream origin feat2




7.
git merge branch_name

after merging locally

git push
so the changes will also be in remote repo

If u are done with your feature or bug fixing, u can add your branch to main







If you fork a project to your github account,

git clone url
url -> url of cloned project

this will bring that perticular project to your system






8.
// delete branch locally
git branch -d localBranchName

// delete branch remotely
git push origin --delete remoteBranchName






9.
git remote add upstream url_from_where_u_forked_the_project

upstream => to denote it's the url of the project you cloned



10.
If the upstream(the repo from which u forked) has changes and if u wanna have that changes in your repo

git fetch --all --prune
gets all the changes

git reset --hard upstream/main
reset the main branch of my origin to the main branch of the upstream

git push origin main





11. step 6 can be done in one line
git pull upstream main    =>changes only in remote
git push origin to main   =>changing in github  repo also


Other way to do step 6 or step 7 is by just clicking "fetch upsteam" option in our github repo






12.
u can commit multiple things together
git rebase -i hash_id_of_commit_once_you_press_git_log
it will show an option of pickor squash(s)
first pick an next s's will be merged into a single commit

now
escape + :x
this will allow to add a new message now
again :x











git reset --hard















Probelms:

If the problem is "main and master are entirely different commit histories.", the following will work

git checkout master   
git branch main master -f    
git checkout main  
git push origin main -f 
